using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Android;
using Android.App;
using Android.Content;
using Android.Content.PM;
using Android.Locations;
using Android.OS;
using Android.Runtime;
using Android.Support.V4.App;
using Android.Support.V4.Content;
using Android.Views;
using Android.Widget;


namespace Jamii_Loan
{
    [Activity(Label = "@string/speed", Theme = "@style/MyAppTheme", MainLauncher = false, ConfigurationChanges = Android.Content.PM.ConfigChanges.Orientation)]
    class Speedometer : Activity, ILocationListener
    {
        LocationManager locManager;
        ILocationListener li;
        int speedvalue;
        private const int MY_PERMISION = 99;
        //TextView for dispaying speed values
        TextView speed, monitor;
        //Use this interface method to get the distance between two points  for speed calculation
        public void OnLocationChanged(Location location)
        {
            if (location == null)
            {
                //If you cant get the speed because of your reasons then set the text display t 0
                speed.Text = "00 m/s";
            }
            else
            {
                //We are going to get the speed from location if its not null
                speedvalue = (int)location.Speed;
                //Display the value of the speed to the app 
                speed.Text = speedvalue + "m/s";
                if (speedvalue == 0)
                {
                    monitor.Text = "Your not moving at a significant speed";
                }
                else if (speedvalue > 0 && speedvalue < 50)
                {
                    monitor.Text = "Your speed is friendly";
                }
                else if (speedvalue > 50 && speedvalue < 80)
                {
                    monitor.Text = "Your speed is dangerous fast";
                }
                else
                {
                    monitor.Text = "Your speed is fatal, SLOW DOWN!";
                }
            }
        }

        public void OnProviderDisabled(string provider)
        {
            //To do auto generated method
        }

        public void OnProviderEnabled(string provider)
        {
            //To do autogenerated method
        }

        public void OnStatusChanged(string provider, [GeneratedEnum] Availability status, Bundle extras)
        {
            //To do auto generated method
        }
        private void requestpermission()
        {
            PackageInfo info = PackageManager.GetPackageInfo(PackageName, PackageInfoFlags.Permissions);
            if (info.RequestedPermissions != null)
            {
                foreach (string p in info.RequestedPermissions)
                {

                }
            }
        }
        private void locationpermissions()
        {
            if (ContextCompat.CheckSelfPermission(this, Android.Manifest.Permission.AccessFineLocation) ==
       Permission.Granted &&
        ContextCompat.CheckSelfPermission(this, Android.Manifest.Permission.AccessCoarseLocation) ==
        Permission.Granted)
            {
                if (!locManager.IsProviderEnabled(LocationManager.GpsProvider))
                {
                    showSettings();
                }
                else
                {
                    Toast.MakeText(this, "Location service is running", ToastLength.Long).Show();
                }
            }
            else
            {
                RequestPermissions(new string[] { Manifest.Permission.AccessCoarseLocation, Manifest.Permission.AccessFineLocation }, 1);
            }
        }
        public void showSettings()
        {
            Android.App.AlertDialog.Builder r = new AlertDialog.Builder(this);
            r.SetTitle("Location Required");
            r.SetMessage("We need your location service enabled for this app to compute speed.You want to activate location?");
            r.SetPositiveButton("Activate", activate);
            r.SetNegativeButton("Decline", decline);
            Android.App.AlertDialog g = r.Create();
            g.Window.Attributes.WindowAnimations = Resource.Style.DialogTheme;
            g.Show();
        }
        private void activate(object sender, DialogClickEventArgs r)
        {
            Intent intent = new Intent(Android.Provider.Settings.ActionLocationSourceSettings);
            StartActivity(intent);
        }
        private void decline(object sender, DialogClickEventArgs m)
        {

        }
        protected override void OnCreate(Bundle savedInstanceState)
        {
            base.OnCreate(savedInstanceState);
            //Define a layout and call setContentView mthod
            SetContentView(Resource.Layout.speed);
            speed = (TextView)FindViewById<TextView>(Resource.Id.speed);
            monitor = (TextView)FindViewById<TextView>(Resource.Id.monitor);
            //Define the Location Manager system service we are going to use to calculate speed of a car
            locManager = (LocationManager)GetSystemService(Context.LocationService);
            /*Requesting updates to use for distance caculation with GPS provider
             The first Zero stands for minTime and the second one for minDistance
             */
            locationpermissions();
             
            try
            {
                locManager.RequestLocationUpdates(LocationManager.GpsProvider, 0, 0, this);
            }
            catch (Java.Lang.SecurityException b)
            {
                Toast.MakeText(this, "" + b.Message, ToastLength.Long).Show();
            }

            this.OnLocationChanged(null);
        }
        public bool checkLocationPermission()
        {
            if (ContextCompat.CheckSelfPermission(this, Manifest.Permission.AccessFineLocation) != Permission.Granted)
            {
                //sHOW AN EXPLANATION
                if (ActivityCompat.ShouldShowRequestPermissionRationale(this, Manifest.Permission.AccessFineLocation))
                {
                    new AlertDialog.Builder(this).SetTitle("Location Permission").SetMessage("Would you like this Jamii Loans to use location service?").SetPositiveButton("OK", okay)
                        .SetNegativeButton("No", no).Create().Show();
                }
                else
                {
                    ActivityCompat.RequestPermissions(this, new string[] { Manifest.Permission.AccessFineLocation }, MY_PERMISION);
                }
            }
            return true;
        }
        public override void OnRequestPermissionsResult(int requestCode, string[] permissions, [GeneratedEnum] Permission[] grantResults)
        {
            base.OnRequestPermissionsResult(requestCode, permissions, grantResults);
            switch (requestCode)
            {
                case MY_PERMISION:
                    {
                        if (grantResults.Length > 0 && grantResults[0] == PackageManager.CheckPermission("ACCESS_COARSE_LOCATION", this.PackageName))
                        {
                            if (ContextCompat.CheckSelfPermission(this, Manifest.Permission.AccessFineLocation) == PackageManager.CheckPermission("ACCESS_COARSE_LOCATION", this.PackageName))
                            {
                                locManager.RequestLocationUpdates(LocationManager.GpsProvider, 400, 1, this);
                            }
                        }
                    }
                    break;
            }
        }
        private void okay(object sender, DialogClickEventArgs e)
        {
            ActivityCompat.RequestPermissions(this, new string[] { Manifest.Permission.AccessFineLocation }, MY_PERMISION);
        }
        private void no(object sender, DialogClickEventArgs e)
        {
            this.FinishAffinity();
        }
    }

}
